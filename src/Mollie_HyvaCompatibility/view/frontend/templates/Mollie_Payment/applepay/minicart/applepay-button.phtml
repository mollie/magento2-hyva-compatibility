<?php
use Magento\Framework\Escaper;

/**
 * @var \Mollie\Payment\Block\Applepay\Shortcut\Button $block
 * @var Escaper $escaper
 */

?>
<script>
    function prepareMollieApplePayMinicart() {
        const objectToFormData = (object, prefix = null, formDataObject = null) => {
            const formData = formDataObject || new FormData();
            Object.keys(object).forEach(key => {
                const value = object[key];
                const name = prefix ? `${prefix}[${key}]` : key;
                if (value instanceof Object) {
                    objectToFormData(value, name, formData);
                } else {
                    formData.append(name, value);
                }
            });

            return new URLSearchParams(formData).toString();
        };

        return {
            totalAmount: 0,

            init: () => {
                // Normally we would use private-content-loaded to get this information, but this component is
                // rendered after this event has been dispatched. So get the information from the browser storage.
                const browserStorage = hyva.getBrowserStorage();
                if (browserStorage) {
                    const cacheStorage = browserStorage.getItem('mage-cache-storage');
                    const cart = JSON.parse(cacheStorage).cart;

                    this.totalAmount = cart.subtotalAmount;
                }

                window.addEventListener('private-content-loaded', event => {
                    this.totalAmount = event.detail.data.cart.subtotalAmount
                })
            },

            pay: () => {
                // The $block total is more reliable as it holds shipping costs and discounts, but due to some setups
                // it is sometimes empty. In that case, use the totalAmount from the browser storage.
                // The correct total amount is retrieved and set during the shipping step.
                const amount = "<?= $escaper->escapeJs($block->getBaseGrandTotal()); ?>" || this.totalAmount;
                let countryCode, postalCode, shippingMethods, selectedShippingMethod, quoteTotals;

                const request = {
                    countryCode: "<?= $escaper->escapeJs($block->getStoreCountry()); ?>",
                    currencyCode: "<?= $escaper->escapeJs($block->getStoreCurrency()); ?>",
                    supportedNetworks: <?= json_encode($block->getSupportedNetworks()); ?>,
                    merchantCapabilities: ['supports3DS'],
                    total: {
                        label: "<?= $escaper->escapeJs($block->getStoreName()); ?>",
                        amount: amount
                    },
                    shippingType: 'shipping',
                    requiredBillingContactFields: [
                        'postalAddress',
                        'name',
                        'email',
                        'phone'
                    ],
                    requiredShippingContactFields: [
                        'postalAddress',
                        'name',
                        'email',
                        'phone'
                    ]
                }

                let session = new ApplePaySession(3, request);

                const getTotal = () => {
                    let totals = [...quoteTotals];
                    let total = totals.pop();

                    total.label = "<?= $escaper->escapeJs($block->getStoreName()); ?>";

                    return total;
                };

                const getLineItems = () => {
                    let totals = [...quoteTotals];
                    totals.pop();

                    return totals;
                };

                const handleAjaxError = (message) => {
                    session.abort();

                    dispatchMessages([
                        {
                            text: message,
                            type: 'error'
                        }
                    ]);
                };

                session.onpaymentmethodselected = () => {
                    session.completePaymentMethodSelection(getTotal(), []);
                };

                session.onshippingcontactselected = (event) => {
                    countryCode = event.shippingContact.countryCode;
                    postalCode = event.shippingContact.postalCode;

                    fetch(`${BASE_URL}mollie/applePay/shippingMethods?form_key=${hyva.getFormKey()}`, {
                        method: 'POST',
                        headers: {
                            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        },
                        body: 'countryCode=' + event.shippingContact.countryCode +
                            '&postalCode=' + event.shippingContact.postalCode
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(result => {
                            shippingMethods = result.shipping_methods;
                            selectedShippingMethod = result.shipping_methods[0];
                            quoteTotals = result.totals;

                            session.completeShippingContactSelection(
                                ApplePaySession.STATUS_SUCCESS,
                                result.shipping_methods,
                                getTotal(),
                                getLineItems()
                            );
                        })
                        .catch(error => handleAjaxError(error));
                };

                session.onshippingmethodselected = (event) => {
                    selectedShippingMethod = event.shippingMethod;

                    fetch(`${BASE_URL}mollie/applePay/shippingMethods?form_key=${hyva.getFormKey()}`, {
                        method: 'POST',
                        headers: {
                            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        },
                        body: objectToFormData({
                            shippingMethod: selectedShippingMethod,
                            countryCode: countryCode,
                            postalCode: postalCode
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(result => {
                            quoteTotals = result.totals;

                            session.completeShippingMethodSelection(
                                ApplePaySession.STATUS_SUCCESS,
                                getTotal(),
                                getLineItems()
                            );
                        })
                        .catch(error => handleAjaxError(error));
                };

                session.onpaymentauthorized = (event) => {
                    fetch(`${BASE_URL}mollie/applePay/placeOrder?form_key=${hyva.getFormKey()}`, {
                        method: 'POST',
                        headers: {
                            'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        },
                        body: objectToFormData({
                            shippingMethod: selectedShippingMethod,
                            billingAddress: event.payment.billingContact,
                            shippingAddress: event.payment.shippingContact,
                            applePayPaymentToken: JSON.stringify(event.payment.token)
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(result => {
                            if (!session) {
                                console.warn('Payment canceled');
                                return;
                            }

                            if (result.error) {
                                handleAjaxError(result.error_message);
                                return;
                            }

                            if (!result.url) {
                                handleAjaxError('Something went wrong, please try again later.');
                                return;
                            }

                            session.completePayment(ApplePaySession.STATUS_SUCCESS);

                            window.dispatchEvent(new CustomEvent("reload-customer-section-data"));

                            setTimeout(() => {
                                location.href = result.url;
                            }, 1000);
                        })
                        .catch(error => handleAjaxError(error));
                };

                session.onvalidatemerchant = (event) => {
                    fetch(
                        `${BASE_URL}mollie/checkout/applePayValidation?form_key=${hyva.getFormKey()}`,
                        {
                            method: 'POST',
                            headers: {
                                'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                            },
                            body: objectToFormData({validationURL: event.validationURL}),
                        }
                    )
                        .then((response) => {
                            if (!response.ok) {
                                throw new Error('Merchant validation failed');
                            }

                            return response.json()
                        })
                        .then((result) => session.completeMerchantValidation(result))
                        .catch(error => handleAjaxError(error));
                };

                session.oncancel = () => {
                    session = null;
                }

                session.begin();
            }
        }
    }
</script>

<div id="mollie_applepay_minicart"
     class="mollie-applepay-minicart"
     x-data="prepareMollieApplePayMinicart()"
>

    <div class="<?= $block->escapeHtmlAttr($block->getButtonClasses()); ?> cursor-pointer"
         @click="pay()"
    >
        <span class="sr-only">Buy with</span>
        <span class="logo"></span>
    </div>
</div>
